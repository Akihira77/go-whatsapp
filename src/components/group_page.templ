package components

import (
	"fmt"
	"github.com/Akihira77/go_whatsapp/src/types"
)

templ GroupPage(myUser *types.User, g *types.Group) {
	<!-- Chat Header -->
	<div id="group__page" class="relative">
		<div id="main" class="relative">
			<div class="bg-gray-200 p-4 flex items-center">
				<div
					id="group__info"
					class="cursor-pointer flex flex-1 items-center gap-2"
				>
					<div class="relative">
						<img src={ fmt.Sprintf("/api/groups/images/%s", g.ID) } alt="Group Profile" class="w-12 h-12 rounded-full object-cover"/>
					</div>
					<div class="flex-1 ml-2">
						<h2 class="font-semibold">{ (g.Name) }</h2>
					</div>
				</div>
				<div class="flex space-x-4 mr-4">
					<div>
						<i class="fas fa-search text-gray-600"></i>
					</div>
					<div class="relative">
						<button id="chat__toggle" class="cursor-pointer focus:outline-none">
							<i class="fas fa-ellipsis-v text-gray-600"></i>
						</button>
						<ul id="chat__menu" class="absolute z-100 right-0 mt-2 w-48 bg-white rounded-md shadow-lg hidden">
							<li>
								<button
									class="cursor-pointer w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center"
									onclick="handleGroupInfo('open')"
								>
									Group Info
								</button>
							</li>
							<li>
								<button
									class="cursor-pointer w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center"
									hx-delete={ fmt.Sprintf("/chat/clear?group=%s", g.ID) }
									hx-confirm="Clear this chat?"
								>
									Clear Chat
								</button>
							</li>
							<li>
								<button
									class="cursor-pointer w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center"
									hx-delete={ fmt.Sprintf("/groups/%s", g.ID) }
									hx-confirm={ fmt.Sprintf("Exit '%s' group?", g.Name) }
								>
									Exit Group
								</button>
							</li>
						</ul>
					</div>
				</div>
			</div>
			<!-- Chat Messages -->
			<div
				id="chat"
				class="flex-1 h-[80vh] bg-[#e5ddd5] overflow-y-auto p-4"
			>
				<!-- Messages will go here -->
				for _, msg := range g.Messages {
					if msg.SenderID == myUser.ID {
						<div
							id="sender__message"
							class="bg-emerald-800 text-white rounded-lg p-2 mb-2 max-w-[70%] ml-auto relative"
						>
							<p class="text-sm">{ msg.Content }</p>
							<span class="text-xs absolute bottom-1 right-4">{ msg.CreatedAt.Format("2/1/2006 3:04 PM") }</span>
						</div>
					} else {
						<div
							id="receiver__message"
							class="bg-slate-800 text-white rounded-lg p-2 mb-2 max-w-[70%] relative"
						>
							<p class="text-sm">{ msg.Content }</p>
							<span class="text-xs absolute bottom-1 right-4">{ msg.CreatedAt.Format("2/1/2006 3:04 PM") }</span>
						</div>
					}
				}
			</div>
			<!-- Message Input -->
			<div
				id="chat__container"
				class="bg-gray-200 p-4 flex items-center"
				data-group-id={ g.ID }
			>
				<div
					id="chat__form"
					data-for="chatInput"
					class="flex w-full items-center"
				>
					<i class="fas fa-smile text-gray-600 mr-4"></i>
					<i class="fas fa-paperclip text-gray-600 mr-4"></i>
					<textarea
						id="chat__input"
						name="chatInput"
						placeholder="Type a message"
						class="flex-1 py-2 px-4 bg-white rounded-md text-sm focus:outline-none resize-none overflow-auto min-h-[40px] max-h-[150px]"
						autofocus
						rows="1"
						wrap="soft"
						maxlength="999"
						required
					></textarea>
					<i class="fas fa-microphone text-gray-600 ml-4"></i>
				</div>
			</div>
		</div>
		<div
			id="right__sidebar"
			class="hidden"
		>
			@GroupInfo(g)
		</div>
		<script>
        document.getElementById("group__info").addEventListener('click', () => {
            handleGroupInfo("open");
        });

        document.getElementById('chat__toggle').addEventListener('click', () => {
            document.getElementById('chat__menu').classList.toggle('hidden');
        });

        window.addEventListener('click', (event) => {
            const dropdownMenu = document.getElementById('chat__menu');
            const dropdownToggle = document.getElementById('chat__toggle');
            if (dropdownToggle && dropdownMenu && !dropdownToggle.contains(event.target)) {
                dropdownMenu.classList.add('hidden');
            }
        });

        function handleGroupInfo(command) {
            if (command === "close") {
                document.getElementById('right__sidebar').classList.add('hidden');
            } else if (command === "open") {
                document.getElementById('right__sidebar').classList.remove('hidden');
            }
            return;
        }

        document.body.addEventListener('htmx:configRequest', function(event) {
            if (event.target.id === 'chat__container') {
                event.preventDefault();  // This stops htmx from sending the request
            }
        });

        function resizeTextarea() {
            const textarea = document.getElementById('chat__input');
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px';
        }

        window.addEventListener('resize', resizeTextarea);

        document.getElementById('chat__input').addEventListener("keydown", (event) => {
            const chatContainer = document.getElementById("chat__container");
            const groupId = chatContainer.getAttribute("data-group-id");

            if (!hasTyped && event.key.length === 1) {
                hasTyped = true;

                webSocket.sendMessage({
                    type: "MARK_MSGS_AS_READ",
                    body: {
                        groupId: groupId,
                    },
                })

                const group = document.getElementById(`unread__group__chat__${groupId}`);
                if (group) {
                    group.className = "invisible";
                    group.innerHTML = 0;
                }
            }

            if (!event.shiftKey && event.key === "Enter") {
                event.preventDefault();

                console.log("group chat submitted", event);

                let chatInput = document.getElementById("chat__input");
                const myUserId = getCookieByName("userId");
                if (!chatInput.value.trim()) return; // Prevent empty messages

                webSocket.sendMessage({
                    type: "GROUP_CHAT",
                    body: {
                        groupId: groupId,
                        content: chatInput.value
                    },
                });

                chatInput.value = '';
                hasTyped = false;
            }

            resizeTextarea();
        });

        resizeTextarea();

        function scrollToBottom() {
            const chatContainer = document.getElementById("chat");
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // Append message to the chat box
        function appendGroupMessage(myUserId, senderId, content, createdAt) {
            const date = new Date(createdAt);
            const chatContainer = document.getElementById("chat");
            const formattedDate = date.toLocaleString('en-US', {
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: '2-digit',
                hour12: true
            }).replace('am', 'AM').replace('pm', 'PM');

            const newMsg = `
                <div class="${myUserId === senderId? "bg-emerald-800 ml-auto" : "bg-slate-800"} text-white rounded-lg p-2 mb-2 max-w-[70%] relative">
                    <p class="text-sm">${content}</p>
                    <span class="text-xs absolute bottom-1 right-4">${formattedDate}</span>
                </div>
            `;
            document.getElementById('chat').insertAdjacentHTML('beforeend', newMsg);
            scrollToBottom();
        }

        scrollToBottom();
    </script>
	</div>
}
